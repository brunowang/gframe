package helper

import "fmt"

type CodeHeader struct {
	header   string
	goPkg    string
	importer *Importer
}

func NewCodeHeader() *CodeHeader {
	return &CodeHeader{
		importer: NewImporter(),
	}
}

func (h *CodeHeader) DoNotEdit() *CodeHeader {
	h.header = doNotEditTmpl + h.header
	return h
}

func (h *CodeHeader) Pkg(pkg string) *CodeHeader {
	h.header = codeHeaderTmpl.String(pkg)
	h.goPkg = pkg
	return h
}

func (h *CodeHeader) Import(importPath string) *CodeHeader {
	h.importer = h.importer.Import(importPath)
	return h
}

func (h *CodeHeader) ImportWithAlias(importPath string, alias string) *CodeHeader {
	h.importer = h.importer.ImportWithAlias(importPath, alias)
	return h
}

func (h CodeHeader) String() string {
	return h.header + h.importer.String()
}

const doNotEditTmpl = `
// Code generated by protoc-gen-go-gframe. DO NOT EDIT.
`

const codeHeaderTmpl CodeHeaderTmpl = `
package %s

// This is a compile-time assertion to ensure that this generated file
// is compatible with the protoc-gen-go-gframe package it is being compiled against.
`

type CodeHeaderTmpl string

func (t CodeHeaderTmpl) String(pkg string) string {
	return fmt.Sprintf(string(t), pkg)
}
