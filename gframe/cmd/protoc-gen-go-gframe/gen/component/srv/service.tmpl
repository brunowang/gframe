type {{.SvcName}}Service interface {
{{range .Handlers}}
{{if and (not .IsStreamingClient) (not .IsStreamingServer)}}
	{{.Method}}(ctx context.Context, req *dto.{{.Request}}) (*dto.{{.Response}}, error)
{{else if and (not .IsStreamingClient) (.IsStreamingServer)}}
	{{.Method}}(ctx context.Context, req *dto.{{.Request}}) (<-chan *dto.{{.Response}}, error)
{{else if and (.IsStreamingClient) (not .IsStreamingServer)}}
	{{.Method}}(ctx context.Context, reqCh <-chan *dto.{{.Request}}) (*dto.{{.Response}}, error)
{{else}}
	{{.Method}}(ctx context.Context, reqCh <-chan *dto.{{.Request}}) (<-chan *dto.{{.Response}}, error)
{{end}}
{{end}}
}

type {{.SvcName}}ServiceImpl struct {}

func New{{.SvcName}}() {{.SvcName}}Service {
    return &{{.SvcName}}ServiceImpl{}
}

{{$svcName := .SvcName}}

{{range .Handlers}}
{{if and (not .IsStreamingClient) (not .IsStreamingServer)}}
func (s *{{$svcName}}ServiceImpl) {{.Method}}(ctx context.Context, req *dto.{{.Request}}) (*dto.{{.Response}}, error) {
    return new(dto.{{.Response}}), nil
}
{{else if and (.IsStreamingClient) (not .IsStreamingServer)}}
func (s *{{$svcName}}ServiceImpl) {{.Method}}(ctx context.Context, reqCh <-chan *dto.{{.Request}}) (*dto.{{.Response}}, error) {
    return new(dto.{{.Response}}), nil
}
{{else if and (not .IsStreamingClient) (.IsStreamingServer)}}
func (s *{{$svcName}}ServiceImpl) {{.Method}}(ctx context.Context, req *dto.{{.Request}}) (<-chan *dto.{{.Response}}, error) {
    rspCh := make(chan *dto.{{.Response}})
    go func() {
        defer close(rspCh)
    }()
    return rspCh, nil
}
{{else}}
func (s *{{$svcName}}ServiceImpl) {{.Method}}(ctx context.Context, reqCh <-chan *dto.{{.Request}}) (<-chan *dto.{{.Response}}, error) {
    rspCh := make(chan *dto.{{.Response}})
    go func() {
        defer close(rspCh)
    }()
    return rspCh, nil
}
{{end}}
{{end}}
