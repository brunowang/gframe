package dao

import (
	"context"
	"errors"
	"github.com/go-sql-driver/mysql"
	"github.com/jmoiron/sqlx"
	"time"
)

var (
	TableExists    = errors.New("table already exists")
	DuplicateKey   = errors.New("duplicate entry key")
	RecordNotFound = errors.New("record not found")
)

type Dao struct {
	dsn string
	db  *sqlx.DB
{{- range .Stmts}}
	{{.Name}} *{{.Name}}Dao
{{- end}}
}

func NewDao(dsn string) *Dao {
	return &Dao{dsn: dsn}
}

func (d *Dao) Init() error {
	db, err := sqlx.Connect("mysql", d.dsn)
	if err != nil {
		return err
	}
	db.SetMaxOpenConns(20)
	db.SetMaxIdleConns(10)
	db.SetConnMaxLifetime(10 * time.Minute)
	db.SetConnMaxIdleTime(5 * time.Minute)
	d.db = db
{{range .Stmts}}
	d.{{.Name}} = New{{.Name}}Dao(db)
{{- end}}

	if err := d.EnsureTableExist(); err != nil {
		if e, ok := err.(*mysql.MySQLError); ok && e.Number == 1050 {
			return TableExists
		}
		return err
	}

	return nil
}

func (d *Dao) EnsureTableExist() error {
	createTableStmts := []string{ {{- range $i, $v := .Stmts}}{{if not (eq 0 $i)}}, {{end}}{{.StmtName}}{{end -}} }
	for _, stmt := range createTableStmts {
		if _, err := d.db.Exec(stmt); err != nil {
			return err
		}
	}
	return nil
}

func (d *Dao) Tx(ctx context.Context, fn func(*sqlx.Tx) error) error {
	tx, err := d.db.BeginTxx(ctx, nil)
	if err != nil {
		return err
	}
	if err := fn(tx); err != nil {
		_ = tx.Rollback()
		return err
	}
	return tx.Commit()
}
