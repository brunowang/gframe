package dao

type Cache interface {
	GetCache(key string, data interface{}) error
	SetCache(key string, data interface{}) error
	DelCache(key string) error
}

type MultiCache struct {
	caches []Cache
}

func NewMultiCache(caches ...Cache) *MultiCache {
	return &MultiCache{caches: caches}
}

func (c *MultiCache) Append(cache Cache) *MultiCache {
	c.caches = append(c.caches, cache)
	return c
}

func (c *MultiCache) GetCache(key string, data interface{}) error {
	for i, cache := range c.caches {
		if err := cache.GetCache(key, data); err == nil {
			if i > 0 {
				_ = c.caches[i-1].SetCache(key, data)
			}
			return nil
		} else if err == RecordNotFound {
			if i > 0 {
				_ = c.caches[i-1].SetCache(key, nil)
			}
			return RecordNotFound
		}
	}
	return CacheNotFound
}

func (c *MultiCache) SetCache(key string, data interface{}) error {
	length := len(c.caches)
	if length == 0 {
		return nil
	}
	return c.caches[length-1].SetCache(key, data)
}

func (c *MultiCache) DelCache(key string) error {
	for _, cache := range c.caches {
		if err := cache.DelCache(key); err != nil {
			return err
		}
	}
	return nil
}
