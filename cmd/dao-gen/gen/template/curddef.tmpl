package dao

import (
	"context"
	stdsql "database/sql"
	"fmt"
	"github.com/go-sql-driver/mysql"
	"github.com/jmoiron/sqlx"
	"strings"
)

type {{.Name}}Dao struct {
	db    *sqlx.DB
	cache Cache
}

func New{{.Name}}Dao(db *sqlx.DB) *{{.Name}}Dao {
	return &{{.Name}}Dao{db: db}
}

func (d *{{.Name}}Dao) WithCache(cache Cache) *{{.Name}}Dao {
	d.cache = cache
	return d
}
{{$table := .}}
func (d *{{.Name}}Dao) Insert{{.Name}}(ctx context.Context, m {{.Name}}) (int64, error) {
	return d.Insert{{.Name}}Tx(ctx, m, nil)
}

func (d *{{.Name}}Dao) Insert{{.Name}}Tx(ctx context.Context, m {{.Name}}, tx *sqlx.Tx) (int64, error) {
	cols, args := genSqlCols(m)
	places := make([]string, len(cols))
	sql := fmt.Sprintf("insert into {{.TabName}}(%s) values(?%s)",
		strings.Join(cols, ","), strings.Join(places, ",?"))
	var db sqlx.ExecerContext = d.db
	if tx != nil {
		db = tx
	}
	res, err := db.ExecContext(ctx, sql, args...)
	if err != nil {
		if e, ok := err.(*mysql.MySQLError); ok && e.Number == 1062 {
			return 0, DuplicateKey
		}
		return 0, err
	}
	return res.LastInsertId()
}
{{if true}}{{end}}
{{- range $i, $v := .Indexes}}{{if $v.Uniq}}
func (d *{{$table.Name}}Dao) Take{{$table.Name}}{{$i}}(ctx context.Context{{range .Cols}}, {{.Name}} {{.Type}}{{end}}) (*{{$table.Name}}, error) {
	one := &{{$table.Name}}{}
	key := fmt.Sprintf("{{$table.TabName}}{{range .Cols}}:%v{{end}}"{{range .Cols}}, {{.Name}}{{end}})
	if d.cache != nil {
		if err := d.cache.GetCache(key, one); err == nil {
			return one, nil
		} else if err == RecordNotFound {
			return nil, err
		}
	}
	var err error
	one, err = d.Select{{$table.Name}}{{$i}}(ctx{{range .Cols}}, {{.Name}}{{end}})
	if err == RecordNotFound && d.cache != nil {
		_ = d.cache.SetCache(key, nil)
	} else if err != nil {
		return nil, err
	}
	if d.cache != nil {
		_ = d.cache.SetCache(key, one)
	}
	return one, nil
}

func (d *{{$table.Name}}Dao) Select{{$table.Name}}{{$i}}(ctx context.Context{{range .Cols}}, {{.Name}} {{.Type}}{{end}}) (*{{$table.Name}}, error) {
	var one {{$table.Name}}
	sql := "select * from {{$table.TabName}} where {{range $i, $v := .Cols}}{{if not (eq 0 $i)}} and {{end}}{{.ColName}}=?{{end}} limit 1"
	if err := d.db.GetContext(ctx, &one, sql{{range .Cols}}, {{.Name}}{{end}}); err != nil {
		if err == stdsql.ErrNoRows {
			return nil, RecordNotFound
		}
		return nil, err
	}
	return &one, nil
}
{{end}}{{end}}
{{- range $i, $v := .Indexes}}{{if $v.Uniq}}
func (d *{{$table.Name}}Dao) Update{{$table.Name}}{{$i}}(ctx context.Context, m {{$table.Name}}{{range .Cols}}, {{.Name}} {{.Type}}{{end}}) (int64, error) {
	return d.Update{{$table.Name}}{{$i}}Tx(ctx, m{{range .Cols}}, {{.Name}}{{end}}, nil)
}

func (d *{{$table.Name}}Dao) Update{{$table.Name}}{{$i}}Tx(ctx context.Context, m {{$table.Name}}{{range .Cols}}, {{.Name}} {{.Type}}{{end}}, tx *sqlx.Tx) (int64, error) {
	cols, args := genSqlCols(m)
	sql := fmt.Sprintf("update {{$table.TabName}} set %s=? where {{range $i, $v := .Cols}}{{if not (eq 0 $i)}} and {{end}}{{.ColName}}=?{{end}}",
		strings.Join(cols, "=?,"))
	args = append(args{{- range .Cols}}, {{.Name}}{{end -}})
	var db sqlx.ExecerContext = d.db
	if tx != nil {
		db = tx
	}
	res, err := db.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, err
	}
	return res.RowsAffected()
}
{{end}}{{end}}
{{- range $i, $v := .Indexes}}{{if $v.Uniq}}
func (d *{{$table.Name}}Dao) Delete{{$table.Name}}{{$i}}(ctx context.Context{{range .Cols}}, {{.Name}} {{.Type}}{{end}}) (int64, error) {
	return d.Delete{{$table.Name}}{{$i}}Tx(ctx{{range .Cols}}, {{.Name}}{{end}}, nil)
}

func (d *{{$table.Name}}Dao) Delete{{$table.Name}}{{$i}}Tx(ctx context.Context{{range .Cols}}, {{.Name}} {{.Type}}{{end}}, tx *sqlx.Tx) (int64, error) {
	sql := "delete from {{$table.TabName}} where {{range $i, $v := .Cols}}{{if not (eq 0 $i)}} and {{end}}{{.ColName}}=?{{end}}"
	var db sqlx.ExecerContext = d.db
	if tx != nil {
		db = tx
	}
	res, err := db.ExecContext(ctx, sql{{range .Cols}}, {{.Name}}{{end}})
	if err != nil {
		return 0, err
	}
	return res.RowsAffected()
}
{{end}}{{end}}
